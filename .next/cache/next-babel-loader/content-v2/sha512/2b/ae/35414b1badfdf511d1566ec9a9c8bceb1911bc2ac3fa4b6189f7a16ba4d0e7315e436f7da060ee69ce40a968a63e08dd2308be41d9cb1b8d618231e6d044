{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/manthan/Desktop/react-next/pages/[meetupId]/index.tsx\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\nconst DB = process.env.MONGODB_URI;\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(DB);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(DB);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/manthan/Desktop/react-next/pages/[meetupId]/index.tsx"],"names":["MongoClient","ObjectId","Fragment","Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address","DB","process","env","MONGODB_URI","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId, InsertOneWriteOpResult, FindOneOptions } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport { GetStaticPaths, GetStaticPropsContext } from 'next'\n\n\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { Meetup } from '../../components/meetups/MeetupList';\n\n\n\n\n\n\nfunction MeetupDetails(props:any) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='description' content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n}\n\nconst DB = process.env.MONGODB_URI\n\ninterface ICountry {\n  _id: string;\n  name: string;\n}\n\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const client = await MongoClient.connect(DB!);\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find( { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: 'blocking',\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context:GetStaticPropsContext | any) {\n  // fetch data for a single meetup\n\n  const {meetupId} = context.params;\n\n  const client = await MongoClient.connect(DB!);\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}